<?php
/**
 * @file
 *
 * Cache Master Module
 *
 * Code for the Cache Master module. This module transfers responsibility to the
 * CDN by marking the given path as Not Cacheable, the page is never cached by
 * Drupal. The path can then be given an optional max-age value in seconds.
 * This will let the CDN know to not retrieve a fresh copy from drupal until
 * the page has expired.
 *
 * @author
 * Lance Geng <longlivelance@gmail.com>
 * Hans Gutknecht <hansdotcom@gmail.com>
 */

/**
 * Implements hook_menu().
 */
function cache_master_menu() {

  $items['admin/config/system/cache-master'] = array(
    'title' => t('Cache Master'),
    'description' => t('Configure paths to exclude from caching and optionally define the max-age header.'),
    'page callback' => 'cache_master_admin',
    'page arguments' => array('cache_master_form'),
    'access arguments' => array('administer site configuration'),
    'file' => 'cache_master.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );


  $items['admin/config/system/cache-master/add'] = array(
    'title' => 'Add Cache Master',
    'description' => 'Allow users to add additional cache masters.',
    'type' => MENU_LOCAL_ACTION,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cache_master_edit_form'),
    'access arguments' => array('administer site configuration'),
    'file' => 'cache_master.admin.inc',
    'weight' => -10,
  );

  $items['admin/config/system/cache-master/%/edit'] = array(
    'title' => 'Cache Master Edit Path',
    'description' => 'Re-configure existing paths.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cache_master_edit_form', 4),
    'file' => 'cache_master.admin.inc',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_CALLBACK,
  );

  $items['admin/config/system/cache-master/%/delete'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cache_master_delete_path', 4),
    'file' => 'cache_master.admin.inc',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_boot().
 *
 * If we have a value in our cache master list, try to parse it. One path per
 * line, followed by an optional space and time in seconds to set the max-age
 * header. e.g. live 60
 */
function cache_master_boot() {

  $cache_masters = cache_master_get_paths();

  if (!empty($cache_masters)) {
    foreach ($cache_masters as $cache_master) {
      if (cache_master_match_path($cache_master['path'])) {
        drupal_page_is_cacheable(FALSE);
        $cache_time = (int)$cache_masters['ttl'];
        if (!empty($cache_time) && $cache_time > 0) {
          drupal_add_http_header('Cache-Control', 'public, max-age=' . $cache_time);
        }
        return;
      }
    }
  }

}

/**
 * Checks if a given pattern matches the current path.
 * @param $pattern (string) url pattern.
 */
function cache_master_match_path($pattern) {
  $to_replace = array(
    '/(\r\n?|\n)/', // newlines
    '/\\\\\*/', // asterisks
    '/(^|\|)\\\\<front\\\\>($|\|)/', // <front>
  );
  $replacements = array(
    '|',
    '.*',
    '\1' . preg_quote(variable_get('site_frontpage', 'node'), '/') . '\2',
  );
  $pattern_quoted = preg_quote($pattern, '/');
  $regexp = '/^(' . preg_replace($to_replace, $replacements, $pattern_quoted) . ')$/';

  $request_path = request_path();

  return (bool)preg_match($regexp, $request_path);
}

/**
 * cache_master_get_paths
 * Get a single path or all custom paths from the db.
 *
 * @param $id (int) unique id of a path in the db.
 * @return returns array of specified tag or all paths.
 */
function cache_master_get_paths($cmid = FALSE) {
  $return = FALSE;
  if ($cmid) {
    $result = db_query("SELECT * FROM {cache_master} WHERE cmid = :cmid", array(':cmid' => $cmid));
    return $result->fetchAssoc();
  }
  else {
    $result = db_query("SELECT * FROM {cache_master}");
    while ($row = $result->fetchAssoc()) {
      $return[] = $row;
    }
    return $return;
  }
}

/**
 * cache_master_set_path
 * Insert the custom paths to the db.
 *
 * @param $path_pattern
 * @param $cache_time
 */
function cache_master_set_path($path_pattern, $cache_time) {
  db_insert('cache_master')
    ->fields(array(
      'path' => $path_pattern,
      'ttl' => $cache_time
    ))
    ->execute();
}

/**
 * cache_master_remove_tag
 * Deletes the tag from the database.
 */
function cache_master_delete_path($cmid) {
  db_delete('cache_master')
    ->condition('cmid', $cmid)
    ->execute();
  drupal_set_message(t('Path Deleted.'));
  drupal_goto('admin/config/system/cache-master');
}
